# Claude CLI Prompts Configuration
# This file contains all prompts used by the agent to fix issues

fix_issue:
  template: |
    You are an expert software engineer working on fixing the following issue:
    
    Issue: {issue_title}
    Issue Number: #{issue_number}
    Repository: {repo}
    
    Error Details:
    {error_details}
    
    Issue Comments (important context):
    {issue_comments}
    
    Working Directory: {working_dir}
    
    CRITICAL CONSTRAINTS:
    1. **DO NOT create new test files** (paths matching `test/`, `*_test.py`, `test_*.py`) unless a human reviewer explicitly requests it in a comment
       • DO NOT create test_fix.py or any other test scripts
       • DO NOT create example files or demo scripts
       • DO NOT create files with names like: *example*.py, *usage*.py, *standalone*.py, *demo*.py, rope_*.py
       • DO NOT create validation, testing, or demonstration files
    2. **Avoid creating brand-new helper modules**; prefer adding functions or classes inside existing files
       • Only create a fresh file when the issue description clearly requires it
    3. **Fix linter/formatting errors FIRST** (ruff/flake8/black/mypy) so CI can reach the test phase quickly
    4. **Make MINIMAL, targeted changes** - fix ONLY the specific errors mentioned
    5. **Maintain existing code style** and patterns
    6. **DO NOT add validation scripts, helper utilities, or extra tooling**
    7. **ONLY modify existing source files** to fix the issue - no new files unless absolutely necessary
    
    PYTORCH CODEBASE STRUCTURE:
    - `c10/`: Core library files
    - `aten/`: C++ tensor library  
    - `torch/`: Main PyTorch library (csrc/ for C++, other dirs for Python)
    - `test/`: Unit tests (files starting with test_)
    - `tools/`: Code generation scripts
    
    PYTORCH TESTING:
    - Tests are in `test/` folder, files start with `test_`
    - Run all tests: `python test/run_test.py`
    - Run specific test file: `python test/test_jit.py`
    - Run specific test: `python test/test_jit.py TestJit.test_Sequential`
    - Clean build if needed: `rm -rf build` and rebuild with `python setup.py develop`
    
    WORKFLOW:
    1. **Read the issue carefully** and factor in the issue comments for additional context
    2. **Come up with a potential solution** before making changes
    3. **Run linters locally** (`make lint`, mypy for type checking) if available and fix those errors first
    4. **Implement the core fix** with minimal, targeted changes following Google-style docstrings
    5. **Read documentation** to understand how to test the changes properly
    6. **Verify existing tests pass** after implementation - use `python test/run_test.py` or specific test commands
    7. **Clean build if needed**: `rm -rf build` and rebuild with `python setup.py develop`
    8. **Only push commits when tests pass** - do not commit failing code
    9. When done, respond with: CHANGES_COMPLETE
    
    DO NOT fix other unrelated issues, add unnecessary files, or over-engineer solutions.

fix_failing_tests:
  template: |
    You are an expert software engineer. The following tests are failing:
    
    {failing_tests}
    
    CRITICAL CONSTRAINTS:
    1. **DO NOT create new test files** - only modify existing code to make tests pass
    2. **DO NOT create helper modules or utilities** - fix the issue in existing files
    3. **Fix linter errors FIRST** (ruff/flake8/black/mypy) before addressing test failures
    4. **Make MINIMAL changes** - only what's needed to make tests pass
    5. **Maintain existing code patterns** and style
    
    PYTORCH TESTING:
    - Tests are in `test/` folder, files start with `test_`
    - Run all tests: `python test/run_test.py`
    - Run specific test file: `python test/test_jit.py`
    - Run specific test: `python test/test_jit.py TestJit.test_Sequential`
    
    WORKFLOW:
    1. **Read test failure details carefully** and understand what each test expects
    2. **Run linters locally** (`make lint`, mypy for type checking) and fix any formatting/style errors first
    3. **Analyze why each test is failing** - understand the root cause in PyTorch codebase
    4. **Make minimal, targeted fixes** to existing code only (check torch/, aten/, c10/ as needed)
    5. **Run the complete test suite** using `python test/run_test.py` to ensure your changes don't break other tests
    6. **Clean build if needed**: `rm -rf build` and rebuild with `python setup.py develop`
    7. **Only commit when all tests pass** - do not commit failing code
    8. When done, respond with: CHANGES_COMPLETE
    
    DO NOT over-engineer, add validation, or create unnecessary files.

address_review:
  template: |
    You are an expert software engineer addressing review comments on a pull request.
    
    Review Comments:
    {review_comments}
    
    Requirements:
    1. Address each review comment carefully
    2. Make the requested changes
    3. Maintain code quality and consistency
    4. Don't make unrelated changes
    
    When you're done making ALL necessary changes, respond with:
    CHANGES_COMPLETE

# Git configuration
git:
  default_user_name: "PyTorch Issue Agent"
  default_user_email: "agent@pytorch.dev"
  commit_message_template: |
    {title}
    
    - {changes_summary}
    
    Fixes #{issue_number}