"""Content sanitization utilities to remove AI/Claude references."""

import re
from typing import List, Dict, Any


class ContentSanitizer:
    """Sanitizes content to remove AI assistant references."""
    
    # Patterns to remove or replace
    CLAUDE_PATTERNS = [
        r'\bClaude\b',
        r'\bAnthropic\b',
        r'\bAI assistant\b',
        r'\bAI generated\b',
        r'\bgenerated by AI\b',
        r'\bautomated by AI\b',
        r'\bLLM\b',
        r'\blarge language model\b',
        r'\bAI model\b',
        r'\bmachine learning model\b',
        r'\bAI agent\b',
        r'\bautonomous agent\b',
        r'\bAI.*generated\b',
        r'\bGenerated with.*Claude\b',
        r'\bPowered by.*Claude\b',
        r'\bUsing.*Claude\b',
        r'\bWith the help of.*AI\b',
        r'\bAI.*assistance\b',
        r'\bAssisted by.*AI\b',
    ]
    
    # Phrases that commonly appear in AI-generated content
    AI_PHRASES = [
        "I'll help you",
        "I will help you", 
        "Let me help you",
        "I can help you",
        "As an AI",
        "As requested",
        "Based on the analysis",
        "Here's what I found",
        "Here's the solution",
        "I've analyzed",
        "I have analyzed",
        "Upon analysis",
        "After analyzing",
        "My analysis shows",
        "The analysis indicates",
        "This appears to be",
        "It seems like",
        "It looks like",
        "This issue appears",
        "The problem seems",
        "This fix should",
        "This change should",
        "This implementation should",
    ]
    
    # Replacement phrases for more natural language
    NATURAL_REPLACEMENTS = {
        "I'll help you": "This change",
        "I will help you": "This fix",
        "Let me help you": "This update",
        "I can help you": "This modification",
        "As requested": "As needed",
        "Based on the analysis": "Based on investigation",
        "Here's what I found": "Investigation shows",
        "Here's the solution": "The solution",
        "I've analyzed": "Analysis of",
        "I have analyzed": "Investigation of",
        "Upon analysis": "Investigation shows",
        "After analyzing": "After investigation",
        "My analysis shows": "Investigation reveals",
        "The analysis indicates": "Evidence suggests",
        "This appears to be": "This is",
        "It seems like": "This is",
        "It looks like": "This is",
        "This issue appears": "This issue is",
        "The problem seems": "The problem is",
        "This fix should": "This fix will",
        "This change should": "This change will",
        "This implementation should": "This implementation will",
    }
    
    # Common typo corrections for commit messages
    TYPO_CORRECTIONS = {
        r'\bAddind\b': 'Adding',
        r'\bFxing\b': 'Fixing',
        r'\bUpating\b': 'Updating',
        r'\bImplmenting\b': 'Implementing',
        r'\bImproving\b': 'Improving',
        r'\bRefctoring\b': 'Refactoring',
        r'\bOptimzing\b': 'Optimizing',
        r'\bEnhacing\b': 'Enhancing',
        r'\bConfigurng\b': 'Configuring',
        r'\bIntegratng\b': 'Integrating',
        r'\bRemovng\b': 'Removing',
        r'\bReslving\b': 'Resolving',
        r'\bCorrectng\b': 'Correcting',
        r'\bResolvng\b': 'Resolving',
    }

    @classmethod
    def sanitize_commit_message(cls, message: str) -> str:
        """Sanitize commit message to remove AI references and fix common typos."""
        # Remove Claude/AI patterns
        sanitized = message
        for pattern in cls.CLAUDE_PATTERNS:
            sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)
        
        # Fix common typos
        for typo_pattern, correction in cls.TYPO_CORRECTIONS.items():
            sanitized = re.sub(typo_pattern, correction, sanitized, flags=re.IGNORECASE)
        
        # Replace AI phrases with natural alternatives
        for ai_phrase, replacement in cls.NATURAL_REPLACEMENTS.items():
            sanitized = re.sub(
                re.escape(ai_phrase), 
                replacement, 
                sanitized, 
                flags=re.IGNORECASE
            )
        
        # Clean up extra whitespace and punctuation
        sanitized = re.sub(r'\s+', ' ', sanitized)
        sanitized = re.sub(r'\s*,\s*', ', ', sanitized)
        sanitized = re.sub(r'\s*\.\s*', '. ', sanitized)
        sanitized = sanitized.strip()
        
        # Ensure it starts with a capital letter and ends properly
        if sanitized:
            sanitized = sanitized[0].upper() + sanitized[1:] if len(sanitized) > 1 else sanitized.upper()
            if not sanitized.endswith('.'):
                sanitized += '.'
        
        return sanitized
    
    @classmethod
    def sanitize_pr_title(cls, title: str, issue_number: int) -> str:
        """Sanitize PR title and ensure it references the issue."""
        # Remove AI references
        sanitized = title
        for pattern in cls.CLAUDE_PATTERNS:
            sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)
        
        # Remove common AI phrases
        for phrase in cls.AI_PHRASES:
            sanitized = re.sub(re.escape(phrase), '', sanitized, flags=re.IGNORECASE)
        
        # Clean up whitespace
        sanitized = re.sub(r'\s+', ' ', sanitized).strip()
        
        # Ensure proper capitalization
        if sanitized:
            sanitized = sanitized[0].upper() + sanitized[1:] if len(sanitized) > 1 else sanitized.upper()
        
        # If title is too generic or empty, create a better one
        if not sanitized or len(sanitized) < 10 or sanitized.lower().startswith('fix'):
            sanitized = f"Fix issue #{issue_number}"
        
        return sanitized
    
    @classmethod
    def sanitize_pr_body(cls, body: str, issue_number: int) -> str:
        """Sanitize PR body and ensure it includes proper issue reference."""
        # Remove AI references
        sanitized = body
        for pattern in cls.CLAUDE_PATTERNS:
            sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)
        
        # Replace AI phrases with natural alternatives
        for ai_phrase, replacement in cls.NATURAL_REPLACEMENTS.items():
            sanitized = re.sub(
                re.escape(ai_phrase), 
                replacement, 
                sanitized, 
                flags=re.IGNORECASE
            )
        
        # Security sanitization - remove HTML/script tags and potential secrets
        sanitized = cls._security_sanitize(sanitized)
        
        # Clean up formatting
        sanitized = re.sub(r'\n\s*\n\s*\n', '\n\n', sanitized)  # Remove extra blank lines
        sanitized = re.sub(r'\s+', ' ', sanitized)  # Normalize spaces
        sanitized = sanitized.strip()
        
        # Ensure it includes "Fixes #issue_number"
        fixes_pattern = rf'\b[Ff]ixes?\s*#?{issue_number}\b'
        if not re.search(fixes_pattern, sanitized):
            # Add fixes reference at the end
            if sanitized:
                sanitized += f"\n\nFixes #{issue_number}"
            else:
                sanitized = f"Fixes #{issue_number}"
        
        return sanitized
    
    @classmethod
    def sanitize_file_changes(cls, file_changes: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Sanitize all file changes to remove AI references."""
        sanitized_changes = []
        
        for change in file_changes:
            sanitized_change = change.copy()
            
            # Sanitize commit message
            if 'commit_message' in sanitized_change:
                sanitized_change['commit_message'] = cls.sanitize_commit_message(
                    sanitized_change['commit_message']
                )
            
            # Sanitize change summary if present
            if 'change_summary' in sanitized_change:
                sanitized_change['change_summary'] = cls._sanitize_text(
                    sanitized_change['change_summary']
                )
            
            # Sanitize code comments in content (basic cleanup)
            if 'content' in sanitized_change:
                content = sanitized_change['content']
                # Remove AI references from comments
                for pattern in cls.CLAUDE_PATTERNS:
                    content = re.sub(
                        rf'#.*{pattern}.*\n', 
                        '', 
                        content, 
                        flags=re.IGNORECASE
                    )
                    content = re.sub(
                        rf'//.*{pattern}.*\n', 
                        '', 
                        content, 
                        flags=re.IGNORECASE
                    )
                    content = re.sub(
                        rf'/\*.*{pattern}.*\*/', 
                        '', 
                        content, 
                        flags=re.IGNORECASE | re.DOTALL
                    )
                
                sanitized_change['content'] = content
            
            sanitized_changes.append(sanitized_change)
        
        return sanitized_changes
    
    @classmethod
    def _sanitize_text(cls, text: str) -> str:
        """General text sanitization."""
        sanitized = text
        
        # Remove AI references
        for pattern in cls.CLAUDE_PATTERNS:
            sanitized = re.sub(pattern, '', sanitized, flags=re.IGNORECASE)
        
        # Replace AI phrases
        for ai_phrase, replacement in cls.NATURAL_REPLACEMENTS.items():
            sanitized = re.sub(
                re.escape(ai_phrase), 
                replacement, 
                sanitized, 
                flags=re.IGNORECASE
            )
        
        # Clean up whitespace
        sanitized = re.sub(r'\s+', ' ', sanitized).strip()
        
        return sanitized
    
    @classmethod
    def _security_sanitize(cls, text: str) -> str:
        """Remove potentially dangerous content like HTML tags and secrets."""
        sanitized = text
        
        # Remove HTML/XML tags
        sanitized = re.sub(r'<[^>]*>', '', sanitized)
        
        # Remove potential secrets/keys (basic patterns)
        secret_patterns = [
            r'\b(?:api[_-]?key|apikey)\s*[:=]\s*[\'"]?[a-zA-Z0-9_-]{10,}[\'"]?',
            r'\b(?:secret|password|token)\s*[:=]\s*[\'"]?[a-zA-Z0-9_-]{8,}[\'"]?',
            r'\b[A-Z0-9]{20,}',  # Long uppercase alphanumeric strings
            r'\b[a-f0-9]{32,}',  # Long hex strings
        ]
        
        for pattern in secret_patterns:
            sanitized = re.sub(pattern, '[REDACTED]', sanitized, flags=re.IGNORECASE)
        
        return sanitized
    
    @classmethod
    def validate_sanitization(cls, text: str) -> List[str]:
        """Validate that text doesn't contain AI references. Returns list of issues found."""
        issues = []
        
        for pattern in cls.CLAUDE_PATTERNS:
            if re.search(pattern, text, re.IGNORECASE):
                issues.append(f"Contains AI reference: {pattern}")
        
        for phrase in cls.AI_PHRASES:
            if phrase.lower() in text.lower():
                issues.append(f"Contains AI phrase: {phrase}")
        
        return issues